@page "/dedicatedpdfgenerator"

@inject MailContoller mailController
@inject OutlookController outLookController
@inject PdfModel pdfmodel
@inject PdfController pdfController
@inject Labels labels
@inject LabelData labelData
@inject PrinterController printerController
@inject IJSRuntime JsRuntime


<div class="PageBody">
    <div class="pageContent">
        <div class="top_row">
            <div class="headingSubheading">
                <h1 class="page_title">Dedicated PDF Document Generator</h1>
            </div>
            <div class="errorMessages">
                <p class="prompt_message">@PromptMessage</p>
                <p class="error_message">@ErrorMessage</p>
            </div>
        </div>

        <div class="allForms_section">
            <div class="generalAndProduct_section">
                <div class="form_section">
                    <fieldset>
                        <legend>General Information:</legend>
                        <label for="clientName">Client Name:</label>
                        <input type="text" id="clientName" name="clientName" @bind-value="@ClientName">
                        <label for="clientAddress">Client Address:</label>
                        <input type="text" id="clientAddress" name="clientAddress" @bind-value="@ClientAddress">
                        <label for="clientNumber">Client Number:</label>
                        <input type="text" id="clientNumber" name="clientNumber" @bind-value="@ClientNumber">
                        <label for="packagingLocation">Place of Packaging:</label>
                        <input type="text" id="packagingLocation" name="packagingLocation" @bind-value="@PackingLocation">
                    </fieldset>
                </div>

                <div class="products_section">
                    <fieldset>
                        <legend>Product Information:</legend>
                        <label for="ProductName">Product Name:</label>
                        <input type="text" id="ProductName" name="ProductName" @bind-value="@ProductName">
                        <label for="ProductDescription">Product Desctiption:</label>
                        <textarea id="ProductDescription" name="ProductDescription" @bind="@ProductDescription"></textarea>
                        <label for="ProductQty">Product Qty:</label>
                        <input type="text" id="ProductQty" name="ProductQty" @bind-value="@ProductQty">
                    </fieldset>
                </div>

                @if (PdfTableList.Count > 0)
                {
                    <div class="product_table_container">
                        <table>
                            <tr>
                                <th style="width:65%">Product Name</th>
                                <th>Product Qty</th>
                            </tr>
                            @foreach (var item in PdfTableList)
                            {
                                <tr>
                                    <td>@item.ItemName</td>
                                    <td>@item.Qty</td>
                                </tr>
                            }

                        </table>
                    </div>
                }

            </div>

            <div class="buttons_section">
                <button class="button" id="clearFieldsBtn" @onclick="(() =>ClearFields())">Clear</button>
                <button class="button" id="startProcessBtn" @onclick="(() =>StartProcess())">Process</button>
                <button class="button" id="addProductBtn" @onclick="(() =>AddProductToList())">Add Product</button>
            </div>
        </div>
    </div>
</div>

@code {
    public static string DCodeLogo { get; set; }

    private bool tooltip1Visible = false;
    private bool tooltip2Visible = false;

    public static string ClientName { get; set; }
    public static string ClientAddress { get; set; }
    public static string ClientNumber { get; set; }
    public static string CountryCode { get; set; } = "+27";
    public static string PackingLocation { get; set; }

    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }

    public string ProductName { get; set; }
    public string ProductDescription { get; set; }
    public string ProductQty { get; set; }
    public int i { get; set; }

    public List<PdfTable> PdfTableList { get; set; }

    public string ErrorMessage { get; set; }
    public string PromptMessage { get; set; }
    public bool HasError { get; set; }

    protected override async Task OnInitializedAsync()
    {
        PdfTableList = new();
        i = 0;
        ClientName = "";
        ClientAddress = "";
        ClientNumber = $"{CountryCode} ";
        PackingLocation = "d.Code Mobility Offices";
        ProductName = "";
        ProductDescription = "";
        ProductQty = "";
        StartDate = DateTime.Now.AddDays(7);
        EndDate = DateTime.Now.AddDays(14);
        DCodeLogo = "/images/dcodelogo.png";
        await ScrollToTop();
    }

    public async Task ClearFields()
    {
        ErrorMessage = "";
        PromptMessage = "";

        PdfTableList = new();
        i = 0;
        ClientName = "";
        ClientAddress = "";
        ClientNumber = $"{CountryCode} ";
        PackingLocation = "d.Code Mobility Offices";
        ProductName = "";
        ProductDescription = "";
        ProductQty = "";
        StartDate = DateTime.Now.AddDays(7);
        EndDate = DateTime.Now.AddDays(14);
        DCodeLogo = "/images/dcodelogo.png";
        PromptMessage = "All Fields Cleared!";

        await ScrollToTop();
    }

    public async Task StartProcess()
    {
        try
        {
            ErrorMessage = "";
            PromptMessage = "";

            // Validation
            var entriesAreValidated = await ValidateMainFormEntries();

            if (!entriesAreValidated) { return; }

            // PDF Functionality
            var numberOfProducts = await GetProductCount();

            if (numberOfProducts < 1)
            {
                ErrorMessage = "There are no products in this delivery note. Please try adding them.";
                StateHasChanged();
                await ScrollToTop();
                return;
            }

            var pdfDocumentDir = pdfController.GeneratePdf(ClientName, ClientAddress, ClientNumber, PackingLocation, numberOfProducts, PdfTableList);

            if (string.IsNullOrEmpty(pdfDocumentDir))
            {
                ErrorMessage = "There was a problem with the generation of the document, please try again, or contact a developer.";
                StateHasChanged();
                await ScrollToTop();
                return;
            }
            else
            {
                ErrorMessage = "";
                PromptMessage = $"Pdf Document Successfully Generated into '{pdfDocumentDir}'!";
                StateHasChanged();
                await ScrollToTop();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"There was a problem generating the PDF document, because: \"{ex.Message}\"";
            StateHasChanged();
            await ScrollToTop();
        }
    }

    public async Task<int> GetProductCount()
    {
        try
        {
            return PdfTableList.Count();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"There was a problem counting the number of products, because: \"{ex.Message}\"";
            StateHasChanged();
            await ScrollToTop();
            return 0;
        }
    }

    public async Task<bool> ValidateProductItems()
    {
        int number;

        if (string.IsNullOrEmpty(ProductName))
        {
            ErrorMessage = $"Please enter the product name before adding a product.";
            await ScrollToTop();
            return false;
        }
        if (string.IsNullOrEmpty(ProductDescription))
        {
            ErrorMessage += $"Please enter the products description before adding a product.";
            await ScrollToTop();
            return false;
        }
        if (string.IsNullOrEmpty(ProductQty))
        {
            ErrorMessage += $"Please enter the products qty before adding a product.";
            await ScrollToTop();
            return false;
        }

        if (int.TryParse(ProductQty, out number))
        {
            if (number.ToString().Length > 3)
            {
                ErrorMessage += "The product QTY is higher than 999, please use a value less than 3 digits!";
                await ScrollToTop();
                return false;
            }
            return true;
        }
        else
        {
            ErrorMessage += "You need to insert a number and not text";
            await ScrollToTop();
            return false;
        }

    }

    public async Task<bool> ValidateMainFormEntries()
    {
        int number;

        if (string.IsNullOrEmpty(ClientName))
        {
            ErrorMessage += "You need to enter a client name!";
            await ScrollToTop();
            return false;
        }
        if (string.IsNullOrEmpty(ClientAddress))
        {
            ErrorMessage += "You need to enter a client address!";
            await ScrollToTop();
            return false;
        }
        if (string.IsNullOrEmpty(ClientNumber))
        {
            ErrorMessage += "You need to enter the clients contact details!";
            await ScrollToTop();
            return false;
        }
        if (StartDate < DateTime.Now)
        {
            ErrorMessage += "You need to input a valid start date for the calendar remindar, the date inputted is in the past. Please select a date after today.";
            await ScrollToTop();
            return false;
        }
        if (EndDate < DateTime.Now)
        {
            ErrorMessage += "You need to input a valid end date for the calendar remindar, the date inputted is in the past. Please select a date after today.";
            await ScrollToTop();
            return false;
        }

        var formattedNumber = ClientNumber.Replace(" ", string.Empty);

        if (formattedNumber.Length > 12)
        {
            ErrorMessage += "The phone number has more than 12 digits including the country code. Please insert a valid phone number, and include the country code.";
            await ScrollToTop();
            return false;
        }
        if (formattedNumber.Length < 12)
        {
            if(formattedNumber.Length == 10)
            {
                if (formattedNumber.StartsWith("0"))
                {
                    return true;
                }
            }
            ErrorMessage += "The phone number has less than 12 digits including the country code. Please insert a valid phone number, by either including the country code '+27' or make sure you input a valid 10 digit number starting with '0'";
            await ScrollToTop();
            return false;
        }
        if (!formattedNumber.StartsWith("+"))
        {
            ErrorMessage += "The phone number is not valid, it needs to start with '+27' Country Code";
            await ScrollToTop();
            return false;
        }

        return true;

    }

    public async Task AddProductToList()
    {
        try
        {
            ErrorMessage = "";
            PromptMessage = "";

            bool valuesValidated = await ValidateProductItems();

            if (!valuesValidated) { return; }

            PdfTableList.Add(new PdfTable());
            PdfTableList[i].ItemName = ProductName;
            PdfTableList[i].ItemDescription = ProductDescription;
            PdfTableList[i].Qty = ProductQty;
            i++;

            PromptMessage = $"{ProductName} added to the list of products.";
            StateHasChanged();

            ProductName = "";
            ProductDescription = "";
            ProductQty = "";
            await ScrollToTop();

        }
        catch (Exception ex)
        {
            ErrorMessage = $"There was a problem adding the product to the table, because: \"{ex.Message}\". Please check your input.";
            await ScrollToTop();
        }
    }

    private async Task ScrollToTop()
    {
        await JsRuntime.InvokeVoidAsync("window.scrollToTop");
    }
}
